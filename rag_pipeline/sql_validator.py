"""
sql_validator.py
------------------------------------
Validates model-generated SQL queries before execution.
Ensures:
 - Syntax correctness
 - Only SELECT statements are allowed
 - No harmful or multi-statement queries
------------------------------------
"""

import sqlparse

ALLOWED_KEYWORDS = {"select", "with"}
FORBIDDEN_KEYWORDS = {"drop", "delete", "update", "insert", "alter", "truncate"}

def validate_sql(sql_query: str) -> bool:
    """
    Validate a SQL query to ensure safety and syntactic correctness.

    Args:
        sql_query (str): The SQL query generated by the model.

    Returns:
        bool: True if valid, False otherwise.
    """

    if not sql_query or not isinstance(sql_query, str):
        print("❌ Empty or invalid SQL input.")
        return False

    # Normalize query
    sql_lower = sql_query.strip().lower()

    # 1. Check for forbidden keywords
    if any(keyword in sql_lower for keyword in FORBIDDEN_KEYWORDS):
        print("❌ Forbidden operation detected. Only SELECT queries are allowed.")
        return False

    # 2. Check for multiple statements
    statements = sqlparse.split(sql_query)
    if len(statements) > 1:
        print("❌ Multiple SQL statements detected — only single SELECT queries are allowed.")
        return False

    # 3. Parse and check first token
    parsed = sqlparse.parse(sql_query)
    if not parsed:
        print("❌ SQL parsing failed.")
        return False

    stmt = parsed[0]
    first_token = stmt.token_first(skip_cm=True)

    if not first_token or first_token.value.lower() not in ALLOWED_KEYWORDS:
        print("❌ Query must start with SELECT or WITH.")
        return False

    # Passed all checks
    return True


if __name__ == "__main__":
    # Example tests
    queries = [
        "SELECT * FROM users;",
        "DROP TABLE users;",
        "UPDATE employees SET name='John';",
        "SELECT name FROM customers WHERE id = 1; SELECT * FROM orders;"
    ]
    for q in queries:
        print(f"\nQuery: {q}")
        print("Valid ✅" if validate_sql(q) else "Invalid ❌")
